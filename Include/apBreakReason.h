//==================================================================================
// Copyright (c) 2016 , Advanced Micro Devices, Inc.  All rights reserved.
//
/// \author AMD Developer Tools Team
/// \file apBreakReason.h
///
//==================================================================================

//------------------------------ apBreakReason.h ------------------------------

#ifndef __APBREAKREASON
#define __APBREAKREASON

// Enumeration that specifies the debugged application break reason.
enum apBreakReason
{
    AP_FOREIGN_BREAK_HIT,                       // The breakpoint hit exception thrown
    // by the debugged process was not
    // generated by CodeXL or its spy.

    AP_MONITORED_FUNCTION_BREAKPOINT_HIT,       // A monitored function breakpoint was hit.

    AP_KERNEL_SOURCE_CODE_BREAKPOINT_HIT,       // A kernel source code breakpoint was hit.

    AP_KERNEL_FUNCTION_NAME_BREAKPOINT_HIT,     // A kernel function name breakpoint was hit.

    AP_NEXT_MONITORED_FUNCTION_BREAKPOINT_HIT,  // A "next" command breakpoint was hit.

    AP_DRAW_MONITORED_FUNCTION_BREAKPOINT_HIT,  // A "draw step" command breakpoint was hit.

    AP_FRAME_BREAKPOINT_HIT,                    // A "frame step" command breakpoint was hit.

    AP_STEP_IN_BREAKPOINT_HIT,                  // A "Step in" command ended.

    AP_STEP_OVER_BREAKPOINT_HIT,                // A "Step over" command ended (in kernel source code, etc).

    AP_STEP_OUT_BREAKPOINT_HIT,                 // A "Step out" command ended (in kernel source code, etc).

    AP_BREAK_COMMAND_HIT,                       // A "break" command breakpoint was hit.

    AP_OPENGL_ERROR_BREAKPOINT_HIT,             // The debugged process generated an OpenGL error.
    // This caused a breakpoint hit.

    AP_OPENCL_ERROR_BREAKPOINT_HIT,             // The debugged process generated an OpenCL error.
    // This caused a breakpoint hit.

    AP_DETECTED_ERROR_BREAKPOINT_HIT,           // The debugged generated a detected error.

    AP_SOFTWARE_FALLBACK_BREAKPOINT_HIT,        // The debugged suffered a software fallback, meaning
    // that a vertex or fragment operation was performed by
    // the CPU instead of the GPU.

    AP_GLDEBUG_OUTPUT_REPORT_BREAKPOINT_HIT,    // A breakpoint triggered by debug output driver report.

    AP_REDUNDANT_STATE_CHANGE_BREAKPOINT_HIT,   // A redundant state change occurred while in
    // "break on redundant state changes" mode.

    AP_DEPRECATED_FUNCTION_BREAKPOINT_HIT,      // A deprecated function call occured while in
    // "break on deprecated function" mode.

    AP_MEMORY_LEAK_BREAKPOINT_HIT,              // A memory leak occurred while in
    // "break on memory leak" mode.

    AP_BEFORE_KERNEL_DEBUGGING_HIT,             // A kernel which we intend to debug is about to have
    // amdclDebugEnqueueNDRangeKernel / amdclDebugEnqueueTask called on it.

    AP_AFTER_KERNEL_DEBUGGING_HIT,              // A kernel which we've debugged just finished having
    // amdclDebugEnqueueNDRangeKernel / amdclDebugEnqueueTask called on it.

    AP_HOST_BREAKPOINT_HIT,                     // A breakpoint in host code
};


#endif  // __APBREAKREASON
